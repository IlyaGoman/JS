1. Information

    Спецификация
            https://www.ecma-international.org/publications-and-standards/standards/ecma-262/
    
    Справочники
            MDN (Mozilla) JavaScript Reference
                https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference
            
            MSDN
                https://docs.microsoft.com/ru-ru/

2. Browser enviroment

    window (Global object)
        - DOM (Document Object Model) - объектая модель документа, пердоставляет доступ к содержимому страницы в виде объектов.
            DOM Living Standart
                https://dom.spec.whatwg.org/
        - BOM (Browser Object Model) - доп.объекты, чтобы работать со всем, кроме document
            Спецификация HTML
                https://html.spec.whatwg.org/

        https://spec.whatwg.org/

3. Основы JavaScript
            use strict - используется в начале скрипта для работы в "современном" режиме
                'use strict' или "use strict"

            let(уст. var) - объявление переменной. Регистрозависимы. Буквы, цифры, $ и _, не с цифры. CamelCase.
                let message = 'Hello JS';
                alert(message);

                В нестрогом режиме можно объявлять без let(var).
        
            const - объявление константы.
                Если объявляется до выполнения скрипта, то можно заглавными.

        Типы данных
            - number - числовой тип(целые, дробные). -pow(2, 53) ~ pow(2, 53)
                - Infinity - математическая бесконечность(можно получить в результате деления на ноль alert(1 / 0); //Infinity)
                - NaN - вычислительная ошибка (alert("строка" / 5); //NaN)
            - bigint - числа произвольной длины (добавляем в конце 'n'). Поддерживается только в браузерах Firefox, Chrome, Edge и Safari.
                let num = 123123123123123123123123n;
            - string - строчный. Выделяется двойными или одинарными кавычками.
                let firstName = 'Ilya';
                let secondName = "Goman";

                Обратные кавычки позволяют встраивать выражения в строку
                    let fullName = `${firstName} ${secondName}`;
            
            - boolean - true/false

            - null - представляет собой «ничего», «пусто» или «значение неизвестно». Используется для присвоения пустого значения.
            - undefined - значение не определено. Используется для проверки, была ли переменная назначена.
                let name;
                alert(name); //undefined
            - object - может содержать простые значения. будь то строка, число, или что-то еще.
            - symbol - используется для создания уникальных идентификаторов в объектах.

            Оператор typeof возвращает тип аргумента.
                typeof 0 // number
                typeof 10n // bigint
                typeof 'dfsakda' // string

        Alert, Prompt, Confirm

            alert - вывод информации в виде модального окна с "ОК"
                alert("text");

            promt(text, [default]) - модальное окно с "ОК/Отмена". Возвращает текст, введенный пользователем.
                text - текстовое сообщение
                [default] - необязательны параметр, который подставляется в значение.
                    result = prompt("Сколько тебе лет?");
                    result = prompt("Сколько тебе лет?", 111);
                    В случае отмены возвращает null, кроме IE - он вставит undefined. Рекомендуется вставлять значение по умолчанию для корректной работы в IE.
            
            confirm - модальное окно с вопросом и кнопками "ОК/Отмена". Возвращает true/false.

        Преобразование типов

            String(value) - преобразование в строку.

            Number(value) - преобразование к числу. Если строка не может быть приведена к числу, то получим NaN(преобразование не удалось).
                undefined -> NaN
                null -> 0
                true / false -> 1 / 0
                string -> Пробельные символы по краям обрезаются. Далее, если остаётся пустая строка, то получаем 0, иначе из непустой строки «считывается» число. При ошибке результат NaN.

            Boolean(value)
                - Значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false
                - Все остальное - true.


        Циклы

            while(i < 3)
            {
                alert(i);
                i++;
            }

            do
            {
                alert(i);
                i++;
            } while(condition)

            for(let i = 0; i < 3; i++)
            {
                alert(i);
            }

            Метка для break/continue до определенного уровня вложенности.
            labelName: 
            for(let i = 0; i < 3; i++)
            {
                for(let j = 0; j < 3; j++)
                {
                    if(i % 2 === 0)
                        {
                            break labelName;
                        }    
                    alert(i);
                }
            }

        Проверка на равенство в switch() всегда строгая, поэтому кроме значения должен совпадать и тип.
        SWITCH(x)
        {
            case value1:
                alert(x);
                break;

            case value2:
                alert(x);
                break;

            case value3:
                alert(x);
                break;
            
            default:
                alert(x);
        }

        Функции

            function nameFunc(params){
                body;
            }

            Function Expression

                let sayHi = function(){
                    alert("Hi");
                }

                sayHi();

            Функции-"коллбэки"
                

                